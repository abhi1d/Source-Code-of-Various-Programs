#include <stdio.h>
#include <stdlib.h>

void init_matrix(void);
void get_player_move();
void get_comp_move();
int comp_smart_check();
int check();
void display();

char matrix[3][3];

int main()
{
    puts("Welcome to the game of Tic-Tac-Toe.");
    puts("You will be playing against the computer.");
    puts("You move first.");
    int done = 0;
    init_matrix();

    while(done == 0)
    {
        get_player_move();
        done = check();
        if(done == 1)
        {
            puts("Game Over, You Win!");
            return;
        }
        else
        {
            get_comp_move();
            display();
        }
        done = check();
    }
    puts("Game Over, Computer Wins!");
}

// Initialize the matrix
void init_matrix(void)
{
    int i, j;
    for(i=0; i<3; i++)
        for(j=0; j<3; j++)
            matrix[i][j] = ' ';
}

// Get Player Move
void get_player_move()
{
    puts("Enter the X-Y co-ordinates of your move:");
    int a,b;
    scanf("%d%d", &a, &b);
    if(matrix[b-1][a-1] != ' ')
    {
        puts("Invalid move, try again!");
        get_player_move();
    }
    else
        matrix[a-1][b-1] = 'X';
}

// Get Computer Move
void get_comp_move()
{
    static int centre=0;
    if(centre==0)
    {
        if(matrix[1][1]==' ')
        {
            matrix[1][1]='O';
            return;
        }
        centre++;
    }
    int i,j, smart = comp_smart_check();
    if(smart==0)
    {
        for(i=0; i<3; i++)
        {
            for(j=0; j<3; j++)
                if(matrix[i][j]==' ')
                    break;
            if(matrix[i][j]==' ')
                break;
        }
        matrix[i][j] = 'O';
    }
}

// Computer Smart check
int comp_smart_check()
{
    int i;
    // Row
    for(i=0; i<3; i++)
    {
        if(matrix[i][0]==matrix[i][1] && matrix[i][0]!=' ' && matrix[i][2]==' ')
        {
            matrix[i][2] = 'O';
            return 1;
        }
        else if(matrix[i][0]==matrix[i][2] && matrix[i][0]!=' ' && matrix[i][1]==' ')
        {
            matrix[i][1] = 'O';
            return 1;
        }
        else if(matrix[i][1]==matrix[i][2] && matrix[i][1]!=' ' && matrix[i][0]==' ')
        {
            matrix[i][0] = 'O';
            return 1;
        }
    }

    // Column
    for(i=0; i<3; i++)
    {
        if(matrix[0][i]==matrix[1][i] && matrix[0][i]!=' ' && matrix[2][i]==' ')
        {
            matrix[2][i] = 'O';
            return 1;
        }
        else if(matrix[0][i]==matrix[2][i] && matrix[0][i]!=' ' && matrix[1][i]==' ')
        {
            matrix[1][i] = 'O';
            return 1;
        }
        else if(matrix[1][i]==matrix[2][i] && matrix[1][i]!=' ' && matrix[0][i]==' ')
        {
            matrix[0][i] = 'O';
            return 1;
        }
    }

    // Left Diagonal
    if(matrix[0][0]==matrix[1][1] && matrix[0][0]!=' ' && matrix[2][2]==' ')
    {
        matrix[2][2] = 'O';
        return 1;
    }
    else if(matrix[1][1]==matrix[2][2] && matrix[1][1]!=' ' && matrix[0][0]==' ')
    {
        matrix[0][0] = 'O';
        return 1;
    }
    else if(matrix[0][0]==matrix[2][2] && matrix[2][2]!=' ' && matrix[1][1]==' ')
    {
        matrix[1][1] = 'O';
        return 1;
    }

    // Right Diagonal
    if(matrix[0][2]==matrix[1][1] && matrix[0][2]!=' ' && matrix[2][0]==' ')
    {
        matrix[2][0] = 'O';
        return 1;
    }
    else if(matrix[0][2]==matrix[2][0] && matrix[2][0]!=' ' && matrix[1][1]==' ')
    {
        matrix[1][1] = 'O';
        return 1;
    }
    else if(matrix[1][1]==matrix[2][0] && matrix[2][0]!=' ' && matrix[0][2]==' ')
    {
        matrix[0][2] = 'O';
        return 1;
    }

    return 0;
}

//Display
void display()
{
    int i;
    for(i=0; i<3; i++)
    {
        printf(" %c | %c | %c \n", matrix[i][0], matrix[i][1], matrix[i][2]);
        printf("-----------\n");
    }
}

//Check
int check()
{
    int i,j;
    //Row Check
    for(i=0; i<3; i++)
        if(matrix[i][0]==matrix[i][1] && matrix[i][0]==matrix[i][2] && matrix[i][0]!=' ')
            return 1;

    //Column Check
    for(i=0; i<3; i++)
        if(matrix[0][i]==matrix[1][i] && matrix[0][i]==matrix[2][i] && matrix[0][i]!=' ')
            return 1;

    //Left Diagonal Check
    if(matrix[1][1]==matrix[2][2] && matrix[1][1]==matrix[0][0] && matrix[0][0]!=' ')
        return 1;

    //Right Diagonal Check
    if(matrix[0][2]==matrix[1][1] && matrix[0][2]==matrix[2][0] && matrix[2][0]!=' ')
        return 1;

    // Draw
    for(i=0; i<3; i++)
    {
        for(j=0; j<3; j++)
            if(matrix[i][j]==' ')
                break;
        if(matrix[i][j]==' ')
            break;
    }
    if(i*j==9)
    {
        puts("Draw");
        exit(0);
    }

    return 0;
}
